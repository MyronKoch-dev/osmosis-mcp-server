"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createClientImpl = exports.MsgClientImpl = void 0;
const binary_1 = require("../../../binary");
const tx_1 = require("./tx");
class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
        this.storeCode = this.storeCode.bind(this);
        this.instantiateContract = this.instantiateContract.bind(this);
        this.instantiateContract2 = this.instantiateContract2.bind(this);
        this.executeContract = this.executeContract.bind(this);
        this.migrateContract = this.migrateContract.bind(this);
        this.updateAdmin = this.updateAdmin.bind(this);
        this.clearAdmin = this.clearAdmin.bind(this);
        this.updateInstantiateConfig = this.updateInstantiateConfig.bind(this);
        this.updateParams = this.updateParams.bind(this);
        this.sudoContract = this.sudoContract.bind(this);
        this.pinCodes = this.pinCodes.bind(this);
        this.unpinCodes = this.unpinCodes.bind(this);
        this.storeAndInstantiateContract = this.storeAndInstantiateContract.bind(this);
        this.removeCodeUploadParamsAddresses = this.removeCodeUploadParamsAddresses.bind(this);
        this.addCodeUploadParamsAddresses = this.addCodeUploadParamsAddresses.bind(this);
        this.storeAndMigrateContract = this.storeAndMigrateContract.bind(this);
        this.updateContractLabel = this.updateContractLabel.bind(this);
    }
    storeCode(request) {
        const data = tx_1.MsgStoreCode.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "StoreCode", data);
        return promise.then(data => tx_1.MsgStoreCodeResponse.decode(new binary_1.BinaryReader(data)));
    }
    instantiateContract(request) {
        const data = tx_1.MsgInstantiateContract.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "InstantiateContract", data);
        return promise.then(data => tx_1.MsgInstantiateContractResponse.decode(new binary_1.BinaryReader(data)));
    }
    instantiateContract2(request) {
        const data = tx_1.MsgInstantiateContract2.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "InstantiateContract2", data);
        return promise.then(data => tx_1.MsgInstantiateContract2Response.decode(new binary_1.BinaryReader(data)));
    }
    executeContract(request) {
        const data = tx_1.MsgExecuteContract.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "ExecuteContract", data);
        return promise.then(data => tx_1.MsgExecuteContractResponse.decode(new binary_1.BinaryReader(data)));
    }
    migrateContract(request) {
        const data = tx_1.MsgMigrateContract.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "MigrateContract", data);
        return promise.then(data => tx_1.MsgMigrateContractResponse.decode(new binary_1.BinaryReader(data)));
    }
    updateAdmin(request) {
        const data = tx_1.MsgUpdateAdmin.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "UpdateAdmin", data);
        return promise.then(data => tx_1.MsgUpdateAdminResponse.decode(new binary_1.BinaryReader(data)));
    }
    clearAdmin(request) {
        const data = tx_1.MsgClearAdmin.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "ClearAdmin", data);
        return promise.then(data => tx_1.MsgClearAdminResponse.decode(new binary_1.BinaryReader(data)));
    }
    updateInstantiateConfig(request) {
        const data = tx_1.MsgUpdateInstantiateConfig.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "UpdateInstantiateConfig", data);
        return promise.then(data => tx_1.MsgUpdateInstantiateConfigResponse.decode(new binary_1.BinaryReader(data)));
    }
    updateParams(request) {
        const data = tx_1.MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "UpdateParams", data);
        return promise.then(data => tx_1.MsgUpdateParamsResponse.decode(new binary_1.BinaryReader(data)));
    }
    sudoContract(request) {
        const data = tx_1.MsgSudoContract.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "SudoContract", data);
        return promise.then(data => tx_1.MsgSudoContractResponse.decode(new binary_1.BinaryReader(data)));
    }
    pinCodes(request) {
        const data = tx_1.MsgPinCodes.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "PinCodes", data);
        return promise.then(data => tx_1.MsgPinCodesResponse.decode(new binary_1.BinaryReader(data)));
    }
    unpinCodes(request) {
        const data = tx_1.MsgUnpinCodes.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "UnpinCodes", data);
        return promise.then(data => tx_1.MsgUnpinCodesResponse.decode(new binary_1.BinaryReader(data)));
    }
    storeAndInstantiateContract(request) {
        const data = tx_1.MsgStoreAndInstantiateContract.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "StoreAndInstantiateContract", data);
        return promise.then(data => tx_1.MsgStoreAndInstantiateContractResponse.decode(new binary_1.BinaryReader(data)));
    }
    removeCodeUploadParamsAddresses(request) {
        const data = tx_1.MsgRemoveCodeUploadParamsAddresses.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "RemoveCodeUploadParamsAddresses", data);
        return promise.then(data => tx_1.MsgRemoveCodeUploadParamsAddressesResponse.decode(new binary_1.BinaryReader(data)));
    }
    addCodeUploadParamsAddresses(request) {
        const data = tx_1.MsgAddCodeUploadParamsAddresses.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "AddCodeUploadParamsAddresses", data);
        return promise.then(data => tx_1.MsgAddCodeUploadParamsAddressesResponse.decode(new binary_1.BinaryReader(data)));
    }
    storeAndMigrateContract(request) {
        const data = tx_1.MsgStoreAndMigrateContract.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "StoreAndMigrateContract", data);
        return promise.then(data => tx_1.MsgStoreAndMigrateContractResponse.decode(new binary_1.BinaryReader(data)));
    }
    updateContractLabel(request) {
        const data = tx_1.MsgUpdateContractLabel.encode(request).finish();
        const promise = this.rpc.request("cosmwasm.wasm.v1.Msg", "UpdateContractLabel", data);
        return promise.then(data => tx_1.MsgUpdateContractLabelResponse.decode(new binary_1.BinaryReader(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
const createClientImpl = (rpc) => {
    return new MsgClientImpl(rpc);
};
exports.createClientImpl = createClientImpl;
