//@ts-nocheck
import { BinaryReader, BinaryWriter } from "../../../binary";
import { GlobalDecoderRegistry } from "../../../registry";
function createBaseParams() {
    return {
        whitelistedFeeTokenSetters: []
    };
}
export const Params = {
    typeUrl: "/osmosis.txfees.v1beta1.Params",
    aminoType: "osmosis/txfees/params",
    is(o) {
        return o && (o.$typeUrl === Params.typeUrl || Array.isArray(o.whitelistedFeeTokenSetters) && (!o.whitelistedFeeTokenSetters.length || typeof o.whitelistedFeeTokenSetters[0] === "string"));
    },
    isSDK(o) {
        return o && (o.$typeUrl === Params.typeUrl || Array.isArray(o.whitelisted_fee_token_setters) && (!o.whitelisted_fee_token_setters.length || typeof o.whitelisted_fee_token_setters[0] === "string"));
    },
    isAmino(o) {
        return o && (o.$typeUrl === Params.typeUrl || Array.isArray(o.whitelisted_fee_token_setters) && (!o.whitelisted_fee_token_setters.length || typeof o.whitelisted_fee_token_setters[0] === "string"));
    },
    encode(message, writer = BinaryWriter.create()) {
        for (const v of message.whitelistedFeeTokenSetters) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.whitelistedFeeTokenSetters.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.whitelistedFeeTokenSetters = object.whitelistedFeeTokenSetters?.map(e => e) || [];
        return message;
    },
    fromAmino(object) {
        const message = createBaseParams();
        message.whitelistedFeeTokenSetters = object.whitelisted_fee_token_setters?.map(e => e) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        if (message.whitelistedFeeTokenSetters) {
            obj.whitelisted_fee_token_setters = message.whitelistedFeeTokenSetters.map(e => e);
        }
        else {
            obj.whitelisted_fee_token_setters = message.whitelistedFeeTokenSetters;
        }
        return obj;
    },
    fromAminoMsg(object) {
        return Params.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/txfees/params",
            value: Params.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return Params.decode(message.value);
    },
    toProto(message) {
        return Params.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.txfees.v1beta1.Params",
            value: Params.encode(message).finish()
        };
    }
};
GlobalDecoderRegistry.register(Params.typeUrl, Params);
GlobalDecoderRegistry.registerAminoProtoMapping(Params.aminoType, Params.typeUrl);
