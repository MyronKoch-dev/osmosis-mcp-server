//@ts-nocheck
import { Params } from "./params";
import { AccountAuthenticator } from "./models";
import { BinaryReader, BinaryWriter } from "../../../binary";
import { GlobalDecoderRegistry } from "../../../registry";
function createBaseQueryParamsRequest() {
    return {};
}
export const QueryParamsRequest = {
    typeUrl: "/osmosis.smartaccount.v1beta1.QueryParamsRequest",
    aminoType: "osmosis/smartaccount/query-params-request",
    is(o) {
        return o && o.$typeUrl === QueryParamsRequest.typeUrl;
    },
    isSDK(o) {
        return o && o.$typeUrl === QueryParamsRequest.typeUrl;
    },
    isAmino(o) {
        return o && o.$typeUrl === QueryParamsRequest.typeUrl;
    },
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    fromAmino(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return QueryParamsRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/smartaccount/query-params-request",
            value: QueryParamsRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryParamsRequest.decode(message.value);
    },
    toProto(message) {
        return QueryParamsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.smartaccount.v1beta1.QueryParamsRequest",
            value: QueryParamsRequest.encode(message).finish()
        };
    }
};
GlobalDecoderRegistry.register(QueryParamsRequest.typeUrl, QueryParamsRequest);
GlobalDecoderRegistry.registerAminoProtoMapping(QueryParamsRequest.aminoType, QueryParamsRequest.typeUrl);
function createBaseQueryParamsResponse() {
    return {
        params: Params.fromPartial({})
    };
}
export const QueryParamsResponse = {
    typeUrl: "/osmosis.smartaccount.v1beta1.QueryParamsResponse",
    aminoType: "osmosis/smartaccount/query-params-response",
    is(o) {
        return o && (o.$typeUrl === QueryParamsResponse.typeUrl || Params.is(o.params));
    },
    isSDK(o) {
        return o && (o.$typeUrl === QueryParamsResponse.typeUrl || Params.isSDK(o.params));
    },
    isAmino(o) {
        return o && (o.$typeUrl === QueryParamsResponse.typeUrl || Params.isAmino(o.params));
    },
    encode(message, writer = BinaryWriter.create()) {
        if (message.params !== undefined) {
            Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseQueryParamsResponse();
        if (object.params !== undefined && object.params !== null) {
            message.params = Params.fromAmino(object.params);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.params = message.params ? Params.toAmino(message.params) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return QueryParamsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/smartaccount/query-params-response",
            value: QueryParamsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryParamsResponse.decode(message.value);
    },
    toProto(message) {
        return QueryParamsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.smartaccount.v1beta1.QueryParamsResponse",
            value: QueryParamsResponse.encode(message).finish()
        };
    }
};
GlobalDecoderRegistry.register(QueryParamsResponse.typeUrl, QueryParamsResponse);
GlobalDecoderRegistry.registerAminoProtoMapping(QueryParamsResponse.aminoType, QueryParamsResponse.typeUrl);
function createBaseGetAuthenticatorsRequest() {
    return {
        account: ""
    };
}
export const GetAuthenticatorsRequest = {
    typeUrl: "/osmosis.smartaccount.v1beta1.GetAuthenticatorsRequest",
    aminoType: "osmosis/smartaccount/get-authenticators-request",
    is(o) {
        return o && (o.$typeUrl === GetAuthenticatorsRequest.typeUrl || typeof o.account === "string");
    },
    isSDK(o) {
        return o && (o.$typeUrl === GetAuthenticatorsRequest.typeUrl || typeof o.account === "string");
    },
    isAmino(o) {
        return o && (o.$typeUrl === GetAuthenticatorsRequest.typeUrl || typeof o.account === "string");
    },
    encode(message, writer = BinaryWriter.create()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAuthenticatorsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseGetAuthenticatorsRequest();
        message.account = object.account ?? "";
        return message;
    },
    fromAmino(object) {
        const message = createBaseGetAuthenticatorsRequest();
        if (object.account !== undefined && object.account !== null) {
            message.account = object.account;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.account = message.account === "" ? undefined : message.account;
        return obj;
    },
    fromAminoMsg(object) {
        return GetAuthenticatorsRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/smartaccount/get-authenticators-request",
            value: GetAuthenticatorsRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return GetAuthenticatorsRequest.decode(message.value);
    },
    toProto(message) {
        return GetAuthenticatorsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.smartaccount.v1beta1.GetAuthenticatorsRequest",
            value: GetAuthenticatorsRequest.encode(message).finish()
        };
    }
};
GlobalDecoderRegistry.register(GetAuthenticatorsRequest.typeUrl, GetAuthenticatorsRequest);
GlobalDecoderRegistry.registerAminoProtoMapping(GetAuthenticatorsRequest.aminoType, GetAuthenticatorsRequest.typeUrl);
function createBaseGetAuthenticatorsResponse() {
    return {
        accountAuthenticators: []
    };
}
export const GetAuthenticatorsResponse = {
    typeUrl: "/osmosis.smartaccount.v1beta1.GetAuthenticatorsResponse",
    aminoType: "osmosis/smartaccount/get-authenticators-response",
    is(o) {
        return o && (o.$typeUrl === GetAuthenticatorsResponse.typeUrl || Array.isArray(o.accountAuthenticators) && (!o.accountAuthenticators.length || AccountAuthenticator.is(o.accountAuthenticators[0])));
    },
    isSDK(o) {
        return o && (o.$typeUrl === GetAuthenticatorsResponse.typeUrl || Array.isArray(o.account_authenticators) && (!o.account_authenticators.length || AccountAuthenticator.isSDK(o.account_authenticators[0])));
    },
    isAmino(o) {
        return o && (o.$typeUrl === GetAuthenticatorsResponse.typeUrl || Array.isArray(o.account_authenticators) && (!o.account_authenticators.length || AccountAuthenticator.isAmino(o.account_authenticators[0])));
    },
    encode(message, writer = BinaryWriter.create()) {
        for (const v of message.accountAuthenticators) {
            AccountAuthenticator.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAuthenticatorsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.accountAuthenticators.push(AccountAuthenticator.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseGetAuthenticatorsResponse();
        message.accountAuthenticators = object.accountAuthenticators?.map(e => AccountAuthenticator.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        const message = createBaseGetAuthenticatorsResponse();
        message.accountAuthenticators = object.account_authenticators?.map(e => AccountAuthenticator.fromAmino(e)) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        if (message.accountAuthenticators) {
            obj.account_authenticators = message.accountAuthenticators.map(e => e ? AccountAuthenticator.toAmino(e) : undefined);
        }
        else {
            obj.account_authenticators = message.accountAuthenticators;
        }
        return obj;
    },
    fromAminoMsg(object) {
        return GetAuthenticatorsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/smartaccount/get-authenticators-response",
            value: GetAuthenticatorsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return GetAuthenticatorsResponse.decode(message.value);
    },
    toProto(message) {
        return GetAuthenticatorsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.smartaccount.v1beta1.GetAuthenticatorsResponse",
            value: GetAuthenticatorsResponse.encode(message).finish()
        };
    }
};
GlobalDecoderRegistry.register(GetAuthenticatorsResponse.typeUrl, GetAuthenticatorsResponse);
GlobalDecoderRegistry.registerAminoProtoMapping(GetAuthenticatorsResponse.aminoType, GetAuthenticatorsResponse.typeUrl);
