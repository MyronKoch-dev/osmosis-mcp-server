//@ts-nocheck
import { BinaryReader, BinaryWriter } from "../../../binary";
import { GlobalDecoderRegistry } from "../../../registry";
function createBaseParams() {
    return {
        maximumUnauthenticatedGas: BigInt(0),
        isSmartAccountActive: false,
        circuitBreakerControllers: []
    };
}
export const Params = {
    typeUrl: "/osmosis.smartaccount.v1beta1.Params",
    aminoType: "osmosis/smartaccount/params",
    is(o) {
        return o && (o.$typeUrl === Params.typeUrl || typeof o.maximumUnauthenticatedGas === "bigint" && typeof o.isSmartAccountActive === "boolean" && Array.isArray(o.circuitBreakerControllers) && (!o.circuitBreakerControllers.length || typeof o.circuitBreakerControllers[0] === "string"));
    },
    isSDK(o) {
        return o && (o.$typeUrl === Params.typeUrl || typeof o.maximum_unauthenticated_gas === "bigint" && typeof o.is_smart_account_active === "boolean" && Array.isArray(o.circuit_breaker_controllers) && (!o.circuit_breaker_controllers.length || typeof o.circuit_breaker_controllers[0] === "string"));
    },
    isAmino(o) {
        return o && (o.$typeUrl === Params.typeUrl || typeof o.maximum_unauthenticated_gas === "bigint" && typeof o.is_smart_account_active === "boolean" && Array.isArray(o.circuit_breaker_controllers) && (!o.circuit_breaker_controllers.length || typeof o.circuit_breaker_controllers[0] === "string"));
    },
    encode(message, writer = BinaryWriter.create()) {
        if (message.maximumUnauthenticatedGas !== BigInt(0)) {
            writer.uint32(8).uint64(message.maximumUnauthenticatedGas);
        }
        if (message.isSmartAccountActive === true) {
            writer.uint32(16).bool(message.isSmartAccountActive);
        }
        for (const v of message.circuitBreakerControllers) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.maximumUnauthenticatedGas = reader.uint64();
                    break;
                case 2:
                    message.isSmartAccountActive = reader.bool();
                    break;
                case 3:
                    message.circuitBreakerControllers.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.maximumUnauthenticatedGas = object.maximumUnauthenticatedGas !== undefined && object.maximumUnauthenticatedGas !== null ? BigInt(object.maximumUnauthenticatedGas.toString()) : BigInt(0);
        message.isSmartAccountActive = object.isSmartAccountActive ?? false;
        message.circuitBreakerControllers = object.circuitBreakerControllers?.map(e => e) || [];
        return message;
    },
    fromAmino(object) {
        const message = createBaseParams();
        if (object.maximum_unauthenticated_gas !== undefined && object.maximum_unauthenticated_gas !== null) {
            message.maximumUnauthenticatedGas = BigInt(object.maximum_unauthenticated_gas);
        }
        if (object.is_smart_account_active !== undefined && object.is_smart_account_active !== null) {
            message.isSmartAccountActive = object.is_smart_account_active;
        }
        message.circuitBreakerControllers = object.circuit_breaker_controllers?.map(e => e) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.maximum_unauthenticated_gas = message.maximumUnauthenticatedGas !== BigInt(0) ? message.maximumUnauthenticatedGas.toString() : undefined;
        obj.is_smart_account_active = message.isSmartAccountActive === false ? undefined : message.isSmartAccountActive;
        if (message.circuitBreakerControllers) {
            obj.circuit_breaker_controllers = message.circuitBreakerControllers.map(e => e);
        }
        else {
            obj.circuit_breaker_controllers = message.circuitBreakerControllers;
        }
        return obj;
    },
    fromAminoMsg(object) {
        return Params.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/smartaccount/params",
            value: Params.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return Params.decode(message.value);
    },
    toProto(message) {
        return Params.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.smartaccount.v1beta1.Params",
            value: Params.encode(message).finish()
        };
    }
};
GlobalDecoderRegistry.register(Params.typeUrl, Params);
GlobalDecoderRegistry.registerAminoProtoMapping(Params.aminoType, Params.typeUrl);
