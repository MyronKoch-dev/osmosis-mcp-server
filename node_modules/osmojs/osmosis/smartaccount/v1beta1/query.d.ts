import { Params, ParamsAmino, ParamsSDKType } from "./params";
import { AccountAuthenticator, AccountAuthenticatorAmino, AccountAuthenticatorSDKType } from "./models";
import { BinaryReader, BinaryWriter } from "../../../binary";
/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
export interface QueryParamsRequestProtoMsg {
    typeUrl: "/osmosis.smartaccount.v1beta1.QueryParamsRequest";
    value: Uint8Array;
}
/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequestAmino {
}
export interface QueryParamsRequestAminoMsg {
    type: "osmosis/smartaccount/query-params-request";
    value: QueryParamsRequestAmino;
}
/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequestSDKType {
}
/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params holds all the parameters of this module. */
    params: Params;
}
export interface QueryParamsResponseProtoMsg {
    typeUrl: "/osmosis.smartaccount.v1beta1.QueryParamsResponse";
    value: Uint8Array;
}
/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponseAmino {
    /** params holds all the parameters of this module. */
    params?: ParamsAmino;
}
export interface QueryParamsResponseAminoMsg {
    type: "osmosis/smartaccount/query-params-response";
    value: QueryParamsResponseAmino;
}
/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponseSDKType {
    params: ParamsSDKType;
}
/** MsgGetAuthenticatorsRequest defines the Msg/GetAuthenticators request type. */
export interface GetAuthenticatorsRequest {
    /** MsgGetAuthenticatorsRequest defines the Msg/GetAuthenticators request type. */
    account: string;
}
export interface GetAuthenticatorsRequestProtoMsg {
    typeUrl: "/osmosis.smartaccount.v1beta1.GetAuthenticatorsRequest";
    value: Uint8Array;
}
/** MsgGetAuthenticatorsRequest defines the Msg/GetAuthenticators request type. */
export interface GetAuthenticatorsRequestAmino {
    /** MsgGetAuthenticatorsRequest defines the Msg/GetAuthenticators request type. */
    account?: string;
}
export interface GetAuthenticatorsRequestAminoMsg {
    type: "osmosis/smartaccount/get-authenticators-request";
    value: GetAuthenticatorsRequestAmino;
}
/** MsgGetAuthenticatorsRequest defines the Msg/GetAuthenticators request type. */
export interface GetAuthenticatorsRequestSDKType {
    account: string;
}
/** MsgGetAuthenticatorsResponse defines the Msg/GetAuthenticators response type. */
export interface GetAuthenticatorsResponse {
    accountAuthenticators: AccountAuthenticator[];
}
export interface GetAuthenticatorsResponseProtoMsg {
    typeUrl: "/osmosis.smartaccount.v1beta1.GetAuthenticatorsResponse";
    value: Uint8Array;
}
/** MsgGetAuthenticatorsResponse defines the Msg/GetAuthenticators response type. */
export interface GetAuthenticatorsResponseAmino {
    account_authenticators?: AccountAuthenticatorAmino[];
}
export interface GetAuthenticatorsResponseAminoMsg {
    type: "osmosis/smartaccount/get-authenticators-response";
    value: GetAuthenticatorsResponseAmino;
}
/** MsgGetAuthenticatorsResponse defines the Msg/GetAuthenticators response type. */
export interface GetAuthenticatorsResponseSDKType {
    account_authenticators: AccountAuthenticatorSDKType[];
}
export declare const QueryParamsRequest: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is QueryParamsRequest;
    isSDK(o: any): o is QueryParamsRequestSDKType;
    isAmino(o: any): o is QueryParamsRequestAmino;
    encode(_: QueryParamsRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest;
    fromPartial(_: Partial<QueryParamsRequest>): QueryParamsRequest;
    fromAmino(_: QueryParamsRequestAmino): QueryParamsRequest;
    toAmino(_: QueryParamsRequest): QueryParamsRequestAmino;
    fromAminoMsg(object: QueryParamsRequestAminoMsg): QueryParamsRequest;
    toAminoMsg(message: QueryParamsRequest): QueryParamsRequestAminoMsg;
    fromProtoMsg(message: QueryParamsRequestProtoMsg): QueryParamsRequest;
    toProto(message: QueryParamsRequest): Uint8Array;
    toProtoMsg(message: QueryParamsRequest): QueryParamsRequestProtoMsg;
};
export declare const QueryParamsResponse: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is QueryParamsResponse;
    isSDK(o: any): o is QueryParamsResponseSDKType;
    isAmino(o: any): o is QueryParamsResponseAmino;
    encode(message: QueryParamsResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse;
    fromPartial(object: Partial<QueryParamsResponse>): QueryParamsResponse;
    fromAmino(object: QueryParamsResponseAmino): QueryParamsResponse;
    toAmino(message: QueryParamsResponse): QueryParamsResponseAmino;
    fromAminoMsg(object: QueryParamsResponseAminoMsg): QueryParamsResponse;
    toAminoMsg(message: QueryParamsResponse): QueryParamsResponseAminoMsg;
    fromProtoMsg(message: QueryParamsResponseProtoMsg): QueryParamsResponse;
    toProto(message: QueryParamsResponse): Uint8Array;
    toProtoMsg(message: QueryParamsResponse): QueryParamsResponseProtoMsg;
};
export declare const GetAuthenticatorsRequest: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is GetAuthenticatorsRequest;
    isSDK(o: any): o is GetAuthenticatorsRequestSDKType;
    isAmino(o: any): o is GetAuthenticatorsRequestAmino;
    encode(message: GetAuthenticatorsRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): GetAuthenticatorsRequest;
    fromPartial(object: Partial<GetAuthenticatorsRequest>): GetAuthenticatorsRequest;
    fromAmino(object: GetAuthenticatorsRequestAmino): GetAuthenticatorsRequest;
    toAmino(message: GetAuthenticatorsRequest): GetAuthenticatorsRequestAmino;
    fromAminoMsg(object: GetAuthenticatorsRequestAminoMsg): GetAuthenticatorsRequest;
    toAminoMsg(message: GetAuthenticatorsRequest): GetAuthenticatorsRequestAminoMsg;
    fromProtoMsg(message: GetAuthenticatorsRequestProtoMsg): GetAuthenticatorsRequest;
    toProto(message: GetAuthenticatorsRequest): Uint8Array;
    toProtoMsg(message: GetAuthenticatorsRequest): GetAuthenticatorsRequestProtoMsg;
};
export declare const GetAuthenticatorsResponse: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is GetAuthenticatorsResponse;
    isSDK(o: any): o is GetAuthenticatorsResponseSDKType;
    isAmino(o: any): o is GetAuthenticatorsResponseAmino;
    encode(message: GetAuthenticatorsResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): GetAuthenticatorsResponse;
    fromPartial(object: Partial<GetAuthenticatorsResponse>): GetAuthenticatorsResponse;
    fromAmino(object: GetAuthenticatorsResponseAmino): GetAuthenticatorsResponse;
    toAmino(message: GetAuthenticatorsResponse): GetAuthenticatorsResponseAmino;
    fromAminoMsg(object: GetAuthenticatorsResponseAminoMsg): GetAuthenticatorsResponse;
    toAminoMsg(message: GetAuthenticatorsResponse): GetAuthenticatorsResponseAminoMsg;
    fromProtoMsg(message: GetAuthenticatorsResponseProtoMsg): GetAuthenticatorsResponse;
    toProto(message: GetAuthenticatorsResponse): Uint8Array;
    toProtoMsg(message: GetAuthenticatorsResponse): GetAuthenticatorsResponseProtoMsg;
};
