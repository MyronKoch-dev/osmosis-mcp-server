"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountAuthenticator = void 0;
//@ts-nocheck
const binary_1 = require("../../../binary");
const helpers_1 = require("../../../helpers");
const registry_1 = require("../../../registry");
function createBaseAccountAuthenticator() {
    return {
        id: BigInt(0),
        type: "",
        data: new Uint8Array()
    };
}
exports.AccountAuthenticator = {
    typeUrl: "/osmosis.smartaccount.v1beta1.AccountAuthenticator",
    aminoType: "osmosis/smartaccount/account-authenticator",
    is(o) {
        return o && (o.$typeUrl === exports.AccountAuthenticator.typeUrl || typeof o.id === "bigint" && typeof o.type === "string" && (o.data instanceof Uint8Array || typeof o.data === "string"));
    },
    isSDK(o) {
        return o && (o.$typeUrl === exports.AccountAuthenticator.typeUrl || typeof o.id === "bigint" && typeof o.type === "string" && (o.data instanceof Uint8Array || typeof o.data === "string"));
    },
    isAmino(o) {
        return o && (o.$typeUrl === exports.AccountAuthenticator.typeUrl || typeof o.id === "bigint" && typeof o.type === "string" && (o.data instanceof Uint8Array || typeof o.data === "string"));
    },
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.id !== BigInt(0)) {
            writer.uint32(8).uint64(message.id);
        }
        if (message.type !== "") {
            writer.uint32(18).string(message.type);
        }
        if (message.data.length !== 0) {
            writer.uint32(26).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountAuthenticator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.type = reader.string();
                    break;
                case 3:
                    message.data = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseAccountAuthenticator();
        message.id = object.id !== undefined && object.id !== null ? BigInt(object.id.toString()) : BigInt(0);
        message.type = object.type ?? "";
        message.data = object.data ?? new Uint8Array();
        return message;
    },
    fromAmino(object) {
        const message = createBaseAccountAuthenticator();
        if (object.id !== undefined && object.id !== null) {
            message.id = BigInt(object.id);
        }
        if (object.type !== undefined && object.type !== null) {
            message.type = object.type;
        }
        if (object.data !== undefined && object.data !== null) {
            message.data = (0, helpers_1.bytesFromBase64)(object.data);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.id = message.id !== BigInt(0) ? message.id.toString() : undefined;
        obj.type = message.type === "" ? undefined : message.type;
        obj.data = message.data ? (0, helpers_1.base64FromBytes)(message.data) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.AccountAuthenticator.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/smartaccount/account-authenticator",
            value: exports.AccountAuthenticator.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.AccountAuthenticator.decode(message.value);
    },
    toProto(message) {
        return exports.AccountAuthenticator.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.smartaccount.v1beta1.AccountAuthenticator",
            value: exports.AccountAuthenticator.encode(message).finish()
        };
    }
};
registry_1.GlobalDecoderRegistry.register(exports.AccountAuthenticator.typeUrl, exports.AccountAuthenticator);
registry_1.GlobalDecoderRegistry.registerAminoProtoMapping(exports.AccountAuthenticator.aminoType, exports.AccountAuthenticator.typeUrl);
