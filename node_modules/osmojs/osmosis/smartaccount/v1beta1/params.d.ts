import { BinaryReader, BinaryWriter } from "../../../binary";
/** Params defines the parameters for the module. */
export interface Params {
    /**
     * MaximumUnauthenticatedGas defines the maximum amount of gas that can be
     * used to authenticate a transaction in ante handler without having fee payer
     * authenticated.
     */
    maximumUnauthenticatedGas: bigint;
    /**
     * IsSmartAccountActive defines the state of the authenticator.
     * If set to false, the authenticator module will not be used
     * and the classic cosmos sdk authentication will be used instead.
     */
    isSmartAccountActive: boolean;
    /**
     * CircuitBreakerControllers defines list of addresses that are allowed to
     * set is_smart_account_active without going through governance.
     */
    circuitBreakerControllers: string[];
}
export interface ParamsProtoMsg {
    typeUrl: "/osmosis.smartaccount.v1beta1.Params";
    value: Uint8Array;
}
/** Params defines the parameters for the module. */
export interface ParamsAmino {
    /**
     * MaximumUnauthenticatedGas defines the maximum amount of gas that can be
     * used to authenticate a transaction in ante handler without having fee payer
     * authenticated.
     */
    maximum_unauthenticated_gas?: string;
    /**
     * IsSmartAccountActive defines the state of the authenticator.
     * If set to false, the authenticator module will not be used
     * and the classic cosmos sdk authentication will be used instead.
     */
    is_smart_account_active?: boolean;
    /**
     * CircuitBreakerControllers defines list of addresses that are allowed to
     * set is_smart_account_active without going through governance.
     */
    circuit_breaker_controllers?: string[];
}
export interface ParamsAminoMsg {
    type: "osmosis/smartaccount/params";
    value: ParamsAmino;
}
/** Params defines the parameters for the module. */
export interface ParamsSDKType {
    maximum_unauthenticated_gas: bigint;
    is_smart_account_active: boolean;
    circuit_breaker_controllers: string[];
}
export declare const Params: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is Params;
    isSDK(o: any): o is ParamsSDKType;
    isAmino(o: any): o is ParamsAmino;
    encode(message: Params, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Params;
    fromPartial(object: Partial<Params>): Params;
    fromAmino(object: ParamsAmino): Params;
    toAmino(message: Params): ParamsAmino;
    fromAminoMsg(object: ParamsAminoMsg): Params;
    toAminoMsg(message: Params): ParamsAminoMsg;
    fromProtoMsg(message: ParamsProtoMsg): Params;
    toProto(message: Params): Uint8Array;
    toProtoMsg(message: Params): ParamsProtoMsg;
};
