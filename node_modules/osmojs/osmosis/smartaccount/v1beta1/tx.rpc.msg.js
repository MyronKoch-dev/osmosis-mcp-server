"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createClientImpl = exports.MsgClientImpl = void 0;
const binary_1 = require("../../../binary");
const tx_1 = require("./tx");
class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
        this.addAuthenticator = this.addAuthenticator.bind(this);
        this.removeAuthenticator = this.removeAuthenticator.bind(this);
        this.setActiveState = this.setActiveState.bind(this);
    }
    addAuthenticator(request) {
        const data = tx_1.MsgAddAuthenticator.encode(request).finish();
        const promise = this.rpc.request("osmosis.smartaccount.v1beta1.Msg", "AddAuthenticator", data);
        return promise.then(data => tx_1.MsgAddAuthenticatorResponse.decode(new binary_1.BinaryReader(data)));
    }
    removeAuthenticator(request) {
        const data = tx_1.MsgRemoveAuthenticator.encode(request).finish();
        const promise = this.rpc.request("osmosis.smartaccount.v1beta1.Msg", "RemoveAuthenticator", data);
        return promise.then(data => tx_1.MsgRemoveAuthenticatorResponse.decode(new binary_1.BinaryReader(data)));
    }
    setActiveState(request) {
        const data = tx_1.MsgSetActiveState.encode(request).finish();
        const promise = this.rpc.request("osmosis.smartaccount.v1beta1.Msg", "SetActiveState", data);
        return promise.then(data => tx_1.MsgSetActiveStateResponse.decode(new binary_1.BinaryReader(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
const createClientImpl = (rpc) => {
    return new MsgClientImpl(rpc);
};
exports.createClientImpl = createClientImpl;
