import { FeeToken, FeeTokenAmino, FeeTokenSDKType } from "./feetoken";
import { BinaryReader, BinaryWriter } from "../../../binary";
/** ===================== MsgSetFeeTokens */
export interface MsgSetFeeTokens {
    feeTokens: FeeToken[];
    sender: string;
}
export interface MsgSetFeeTokensProtoMsg {
    typeUrl: "/osmosis.txfees.v1beta1.MsgSetFeeTokens";
    value: Uint8Array;
}
/** ===================== MsgSetFeeTokens */
export interface MsgSetFeeTokensAmino {
    fee_tokens?: FeeTokenAmino[];
    sender?: string;
}
export interface MsgSetFeeTokensAminoMsg {
    type: "osmosis/set-fee-tokens";
    value: MsgSetFeeTokensAmino;
}
/** ===================== MsgSetFeeTokens */
export interface MsgSetFeeTokensSDKType {
    fee_tokens: FeeTokenSDKType[];
    sender: string;
}
export interface MsgSetFeeTokensResponse {
}
export interface MsgSetFeeTokensResponseProtoMsg {
    typeUrl: "/osmosis.txfees.v1beta1.MsgSetFeeTokensResponse";
    value: Uint8Array;
}
export interface MsgSetFeeTokensResponseAmino {
}
export interface MsgSetFeeTokensResponseAminoMsg {
    type: "osmosis/txfees/set-fee-tokens-response";
    value: MsgSetFeeTokensResponseAmino;
}
export interface MsgSetFeeTokensResponseSDKType {
}
export declare const MsgSetFeeTokens: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is MsgSetFeeTokens;
    isSDK(o: any): o is MsgSetFeeTokensSDKType;
    isAmino(o: any): o is MsgSetFeeTokensAmino;
    encode(message: MsgSetFeeTokens, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgSetFeeTokens;
    fromPartial(object: Partial<MsgSetFeeTokens>): MsgSetFeeTokens;
    fromAmino(object: MsgSetFeeTokensAmino): MsgSetFeeTokens;
    toAmino(message: MsgSetFeeTokens): MsgSetFeeTokensAmino;
    fromAminoMsg(object: MsgSetFeeTokensAminoMsg): MsgSetFeeTokens;
    toAminoMsg(message: MsgSetFeeTokens): MsgSetFeeTokensAminoMsg;
    fromProtoMsg(message: MsgSetFeeTokensProtoMsg): MsgSetFeeTokens;
    toProto(message: MsgSetFeeTokens): Uint8Array;
    toProtoMsg(message: MsgSetFeeTokens): MsgSetFeeTokensProtoMsg;
};
export declare const MsgSetFeeTokensResponse: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is MsgSetFeeTokensResponse;
    isSDK(o: any): o is MsgSetFeeTokensResponseSDKType;
    isAmino(o: any): o is MsgSetFeeTokensResponseAmino;
    encode(_: MsgSetFeeTokensResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgSetFeeTokensResponse;
    fromPartial(_: Partial<MsgSetFeeTokensResponse>): MsgSetFeeTokensResponse;
    fromAmino(_: MsgSetFeeTokensResponseAmino): MsgSetFeeTokensResponse;
    toAmino(_: MsgSetFeeTokensResponse): MsgSetFeeTokensResponseAmino;
    fromAminoMsg(object: MsgSetFeeTokensResponseAminoMsg): MsgSetFeeTokensResponse;
    toAminoMsg(message: MsgSetFeeTokensResponse): MsgSetFeeTokensResponseAminoMsg;
    fromProtoMsg(message: MsgSetFeeTokensResponseProtoMsg): MsgSetFeeTokensResponse;
    toProto(message: MsgSetFeeTokensResponse): Uint8Array;
    toProtoMsg(message: MsgSetFeeTokensResponse): MsgSetFeeTokensResponseProtoMsg;
};
