import { BinaryReader, BinaryWriter } from "../../../binary";
/** Params holds parameters for the txfees module */
export interface Params {
    whitelistedFeeTokenSetters: string[];
}
export interface ParamsProtoMsg {
    typeUrl: "/osmosis.txfees.v1beta1.Params";
    value: Uint8Array;
}
/** Params holds parameters for the txfees module */
export interface ParamsAmino {
    whitelisted_fee_token_setters?: string[];
}
export interface ParamsAminoMsg {
    type: "osmosis/txfees/params";
    value: ParamsAmino;
}
/** Params holds parameters for the txfees module */
export interface ParamsSDKType {
    whitelisted_fee_token_setters: string[];
}
export declare const Params: {
    typeUrl: string;
    aminoType: string;
    is(o: any): o is Params;
    isSDK(o: any): o is ParamsSDKType;
    isAmino(o: any): o is ParamsAmino;
    encode(message: Params, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Params;
    fromPartial(object: Partial<Params>): Params;
    fromAmino(object: ParamsAmino): Params;
    toAmino(message: Params): ParamsAmino;
    fromAminoMsg(object: ParamsAminoMsg): Params;
    toAminoMsg(message: Params): ParamsAminoMsg;
    fromProtoMsg(message: ParamsProtoMsg): Params;
    toProto(message: Params): Uint8Array;
    toProtoMsg(message: Params): ParamsProtoMsg;
};
