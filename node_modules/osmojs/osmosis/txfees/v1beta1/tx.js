"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgSetFeeTokensResponse = exports.MsgSetFeeTokens = void 0;
//@ts-nocheck
const feetoken_1 = require("./feetoken");
const binary_1 = require("../../../binary");
const registry_1 = require("../../../registry");
function createBaseMsgSetFeeTokens() {
    return {
        feeTokens: [],
        sender: ""
    };
}
exports.MsgSetFeeTokens = {
    typeUrl: "/osmosis.txfees.v1beta1.MsgSetFeeTokens",
    aminoType: "osmosis/set-fee-tokens",
    is(o) {
        return o && (o.$typeUrl === exports.MsgSetFeeTokens.typeUrl || Array.isArray(o.feeTokens) && (!o.feeTokens.length || feetoken_1.FeeToken.is(o.feeTokens[0])) && typeof o.sender === "string");
    },
    isSDK(o) {
        return o && (o.$typeUrl === exports.MsgSetFeeTokens.typeUrl || Array.isArray(o.fee_tokens) && (!o.fee_tokens.length || feetoken_1.FeeToken.isSDK(o.fee_tokens[0])) && typeof o.sender === "string");
    },
    isAmino(o) {
        return o && (o.$typeUrl === exports.MsgSetFeeTokens.typeUrl || Array.isArray(o.fee_tokens) && (!o.fee_tokens.length || feetoken_1.FeeToken.isAmino(o.fee_tokens[0])) && typeof o.sender === "string");
    },
    encode(message, writer = binary_1.BinaryWriter.create()) {
        for (const v of message.feeTokens) {
            feetoken_1.FeeToken.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetFeeTokens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.feeTokens.push(feetoken_1.FeeToken.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.sender = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgSetFeeTokens();
        message.feeTokens = object.feeTokens?.map(e => feetoken_1.FeeToken.fromPartial(e)) || [];
        message.sender = object.sender ?? "";
        return message;
    },
    fromAmino(object) {
        const message = createBaseMsgSetFeeTokens();
        message.feeTokens = object.fee_tokens?.map(e => feetoken_1.FeeToken.fromAmino(e)) || [];
        if (object.sender !== undefined && object.sender !== null) {
            message.sender = object.sender;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        if (message.feeTokens) {
            obj.fee_tokens = message.feeTokens.map(e => e ? feetoken_1.FeeToken.toAmino(e) : undefined);
        }
        else {
            obj.fee_tokens = message.feeTokens;
        }
        obj.sender = message.sender === "" ? undefined : message.sender;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSetFeeTokens.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/set-fee-tokens",
            value: exports.MsgSetFeeTokens.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgSetFeeTokens.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSetFeeTokens.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.txfees.v1beta1.MsgSetFeeTokens",
            value: exports.MsgSetFeeTokens.encode(message).finish()
        };
    }
};
registry_1.GlobalDecoderRegistry.register(exports.MsgSetFeeTokens.typeUrl, exports.MsgSetFeeTokens);
registry_1.GlobalDecoderRegistry.registerAminoProtoMapping(exports.MsgSetFeeTokens.aminoType, exports.MsgSetFeeTokens.typeUrl);
function createBaseMsgSetFeeTokensResponse() {
    return {};
}
exports.MsgSetFeeTokensResponse = {
    typeUrl: "/osmosis.txfees.v1beta1.MsgSetFeeTokensResponse",
    aminoType: "osmosis/txfees/set-fee-tokens-response",
    is(o) {
        return o && o.$typeUrl === exports.MsgSetFeeTokensResponse.typeUrl;
    },
    isSDK(o) {
        return o && o.$typeUrl === exports.MsgSetFeeTokensResponse.typeUrl;
    },
    isAmino(o) {
        return o && o.$typeUrl === exports.MsgSetFeeTokensResponse.typeUrl;
    },
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetFeeTokensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseMsgSetFeeTokensResponse();
        return message;
    },
    fromAmino(_) {
        const message = createBaseMsgSetFeeTokensResponse();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSetFeeTokensResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/txfees/set-fee-tokens-response",
            value: exports.MsgSetFeeTokensResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgSetFeeTokensResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSetFeeTokensResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.txfees.v1beta1.MsgSetFeeTokensResponse",
            value: exports.MsgSetFeeTokensResponse.encode(message).finish()
        };
    }
};
registry_1.GlobalDecoderRegistry.register(exports.MsgSetFeeTokensResponse.typeUrl, exports.MsgSetFeeTokensResponse);
registry_1.GlobalDecoderRegistry.registerAminoProtoMapping(exports.MsgSetFeeTokensResponse.aminoType, exports.MsgSetFeeTokensResponse.typeUrl);
